weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Define the number of portfolio simulations
n_simulations <- 10000
# Store the results in the matrix
portfolios[i, ] <- c(portfolio_mean, portfolio_sd, portfolio_sharpe, weights[1], weights[2], weights[3])
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(portfolio_mean, portfolio_sd, portfolio_sharpe, weights[1], weights[2], weights[3])
}
warnings()
# Create an empty matrix to store simulation results
portfolios <- data.frame(nrow = n_simulations, ncol = 7)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(portfolio_mean, portfolio_sd, portfolio_sharpe, weights[1], weights[2], weights[3], weights[4])
}
# Create an empty matrix to store simulation results
portfolios <- data.frame(nrow = n_simulations, ncol = 3)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(portfolio_mean, portfolio_sd, portfolio_sharpe)
}
warning()
warnings()
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Create an empty matrix to store simulation results
portfolios <- data.frame(nrow = n_simulations, ncol = 7)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# 1: Load the data
load("./A.RData")
A <- nominal[,2:5]
meanSD <- data.frame(
mean = apply(A, 2, mean),
SD = apply(A, 2, sd))
correlation <- cor(nominal[-1])[1:4,1:4]
covariance <- cov(nominal[-1])[1:4,1:4]
rf <- mean(nominal[,5])
# Define the number of portfolio simulations
n_simulations <- 10000
# Create an empty matrix to store simulation results
portfolios <- data.frame(nrow = n_simulations, ncol = 7)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %% (risky_cor_matrix %% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %% (correlation %% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
covariance <- cov(nominal[-1])[1:4,1:4]
correlation <- cor(nominal[-1])[1:4,1:4]
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %% (correlation %% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
warnings()
View(portfolios)
# Create an empty matrix to store simulation results
portfolios <- matrix(nrow = n_simulations, ncol = 7)
# Create an empty matrix to store simulation results
portfolios <- matrix(nrow = n_simulations, ncol = 7)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
View(portfolios)
# Create a data frame from the matrix
portfolios_df <- as.data.frame(portfolios)
colnames(portfolios_df) <- c("weights1","weights2","weights3","weights4", "Mean Return", "Standard Deviation", "Sharpe Ratio")
View(portfolios_df)
ggplot(portfolios_df, aes(x = `Standard Deviation`, y = `Mean Return`, color = `Sharpe Ratio`)) +
geom_point() +
labs(title = "Efficient Frontier",
x = "Standard Deviation (Risk)",
y = "Mean Return",
color = "Sharpe Ratio") +
geom_abline(intercept = rf, slope = max(portfolios_df$`Sharpe Ratio`), color = "red", size = 1)+
theme_minimal()
library(ggplot2)
library(fPortfolio)
ggplot(portfolios_df, aes(x = `Standard Deviation`, y = `Mean Return`, color = `Sharpe Ratio`)) +
geom_point() +
labs(title = "Efficient Frontier",
x = "Standard Deviation (Risk)",
y = "Mean Return",
color = "Sharpe Ratio") +
geom_abline(intercept = rf, slope = max(portfolios_df$`Sharpe Ratio`), color = "red", size = 1)+
theme_minimal()
# Define the number of portfolio simulations
n_simulations <- 50000
# Create an empty matrix to store simulation results
portfolios <- matrix(nrow = n_simulations, ncol = 7)
# Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Create a data frame from the matrix
portfolios_df <- as.data.frame(portfolios)
colnames(portfolios_df) <- c("weights1","weights2","weights3","weights4", "Mean Return", "Standard Deviation", "Sharpe Ratio")
# Step 4: Print the data frame
print(head(portfolios_df))
library(ggplot2)
library(fPortfolio)
ggplot(portfolios_df, aes(x = `Standard Deviation`, y = `Mean Return`, color = `Sharpe Ratio`)) +
geom_point() +
labs(title = "Efficient Frontier",
x = "Standard Deviation (Risk)",
y = "Mean Return",
color = "Sharpe Ratio") +
geom_abline(intercept = rf, slope = max(portfolios_df$`Sharpe Ratio`), color = "red", size = 1)+
theme_minimal()
# Step 5: Get the MVE
max(portfolios_df$`Sharpe Ratio`)
# Step 5: Get the MVE
filter(portfolios_df, portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
# Step 5: Get the MVE
filter(portfolios_df, `Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
# Step 5: Get the MVE
portfolios_df
portfolios_df %>% filter(portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
library(tidyverse)
portfolios_df %>% filter(portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
MSR <- portfolios_df %>% filter(portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
MSR
GMV <- portfolios_df %>% filter(portfolios_df$`Standard Deviation` == min(portfolios_df$`Standard Deviation`))
GMV
MSR,GMV
c(MSR, GMV)
# Step 6: Risk Aversion portfolios
A = c(1.3, 2.8, 6.5, 10.5, 16.9)
A[1]
MSR
Wmsr <- (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)
Wmsr
MSR
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
WeightMSR = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)
)
Aportfolios %>% mutate(WeightRF = 1-WeightMSR) %>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF)
Aportfolios <- Aportfolios %>% mutate(WeightRF = 1-WeightMSR) %>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF)
Aportfolios
MSR
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
WeightMSR = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)
)
Aportfolios <- Aportfolios %>% mutate(WeightRF = 1-WeightMSR) %>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF) %>%
mutate(`Standard Deviation` = MSR$`Standard Deviation`*WeightMSR)
Aportfolios
MSR
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
WeightMSR = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)
)%>% mutate(WeightRF = 1-WeightMSR) %>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF) %>%
mutate(`Standard Deviation` = MSR$`Standard Deviation`*WeightMSR)
Aportfolios
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
WeightMSR = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2))%>%
mutate(WeightRF = 1-WeightMSR) %>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF,
`Standard Deviation` = MSR$`Standard Deviation`*WeightMSR) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
Aportfolios
AllPortfolio <- rbind(MSR,GMV,Aportfolios)
AllPortfolio <- rbind(MSR,GMV)
rbind(AllPortfolio,Aportfolios)
MSR
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2),
weight2 = 1-weight1)%>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF,
`Standard Deviation` = MSR$`Standard Deviation`*WeightMSR) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)) %>%
mutate(weight2 = 1-weight1)%>%
mutate(`Mean Return` = MSR$`Mean Return`*WeightMSR + rf*WeightRF,
`Standard Deviation` = MSR$`Standard Deviation`*WeightMSR) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)) %>%
mutate(weight2 = 1-weight1)%>%
mutate(`Mean Return` = MSR$`Mean Return`*weight1 + rf*weight2,
`Standard Deviation` = MSR$`Standard Deviation`*weight1) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
Aportfolios
MSR
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)) %>%
mutate(weight2 = 1-weight1)%>%
mutate(weight3 = NA,
weight4 = NA,
`Mean Return` = MSR$`Mean Return`*weight1 + rf*weight2,
`Standard Deviation` = MSR$`Standard Deviation`*weight1) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
Aportfolios
AllPortfolio <- rbind(MSR,GMV)
AllPortfolio <- rbind(MSR,GMV, Aportfolios)
rbind(AllPortfolio,Aportfolios)
AllPortfolio <- rbind(MSR,GMV)
AllPortfolio
Aportfolios
name <- data.frame(Portfolio = c("MSR","GMV"))
cbind(name, AllPortfolio)
AllPortfolio <- cbind(name, AllPortfolio)
rbind(AllPortfolio,Aportfolios)
names(Aportfolios)[1] <- "Portfolio"
rbind(AllPortfolio,Aportfolios)
Aportfolios
names(Aportfolios) <- names(AllPortfolio)
rbind(AllPortfolio,Aportfolios)
# Step 5: Get MSR & GMV
MSR <- portfolios_df %>% filter(portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
MSR
GMV <- portfolios_df %>% filter(portfolios_df$`Standard Deviation` == min(portfolios_df$`Standard Deviation`))
GMV
AllPortfolio <- rbind(MSR,GMV)
name <- data.frame(Portfolio = c("MSR","GMV"))
AllPortfolio <- cbind(name, AllPortfolio)
# Step 6: Risk Aversion portfolios
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)) %>%
mutate(weight2 = 1-weight1)%>%
mutate(weight3 = NA,
weight4 = NA,
`Mean Return` = MSR$`Mean Return`*weight1 + rf*weight2,
`Standard Deviation` = MSR$`Standard Deviation`*weight1) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
names(Aportfolios) <- names(AllPortfolio)
AllPortfolio <- rbind(AllPortfolio,Aportfolios)
AllPortfolio
View(AllPortfolio)
ggplot(AllPortfolio)+
geom_point(aes(x = `Standard Deviation`, y = `Mean Return`))
AllPortfolio
ggplot(AllPortfolio)+
geom_jitter(aes(x = `Standard Deviation`, y = `Mean Return`))
ggplot(AllPortfolio)+
geom_point(aes(x = `Standard Deviation`, y = `Mean Return`))
ggplot(AllPortfolio)+
geom_point(aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
AllPortfolio
ggplot()+
geom_point(data = AllPortfolio, aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
plot(AllPortfolio)
plot(AllPortfolio$`Standard Deviation`, AllPortfolio$`Mean Return`)
AllPortfolio
ggplot()+
geom_point(data = AllPortfolio, aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
plot(AllPortfolio$`Standard Deviation`*100, AllPortfolio$`Mean Return`*100)
ggplot()+
geom_point(data = AllPortfolio, aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
AllPortfolio
ggplot()+
geom_point(data = AllPortfolio[1:3,], aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
ggplot()+
geom_point(data = AllPortfolio[4:7,], aes(x = `Standard Deviation`, y = `Mean Return`, color = Portfolio))
library(tseries)
n_portfolios <- 100
set.seed(1234)
all_weights <- matrix(nrow = n_portfolios, ncol = 4)
for (i in 1:n_portfolios){
weights <- runif(4)
weights <- weights/ sum(weights)
all_weights[i,] <- weights
}
portfolio_Rsd <- data.frame(
return = rowSums(meanSD$ERi*all_weights),
sd =  sqrt(rowSums(all_weights %*% (covariance %*% t(all_weights))))
)
portfolio_Rsd <- data.frame(
return = rowSums(meanSD$ERi*all_weights),
sd =  sqrt(rowSums(all_weights %*% (covariance %*% t(all_weights))))
)
load("./A.RData")
# 1. mean and sd
meanSD <- data.frame(
ERi = apply(nominal[-1], 2, mean),
SDi = apply(nominal[-1], 2, sd))
otherAssets <- meanSD[5:6,]
meanSD <- meanSD[1:4,]
# 2. correlation
correlation <- cor(nominal[-1])[1:4,1:4]
# 3. covariance
covariance <- cov(nominal[-1])[1:4,1:4]
# 1. mean and sd
meanSD <- data.frame(
ERi = apply(nominal[-1], 2, mean),
SDi = apply(nominal[-1], 2, sd))
otherAssets <- meanSD[5:6,]
meanSD <- meanSD[1:4,]
# 2. correlation
correlation <- cor(nominal[-1])[1:4,1:4]
# 3. covariance
covariance <- cov(nominal[-1])[1:4,1:4]
n_portfolios <- 100
set.seed(1234)
all_weights <- matrix(nrow = n_portfolios, ncol = 4)
for (i in 1:n_portfolios){
weights <- runif(4)
weights <- weights/ sum(weights)
all_weights[i,] <- weights
}
frontier <- read_excel("./nominal.xlsx", sheet = "frontier")
library(readxl)
frontier <- read_excel("./nominal.xlsx", sheet = "frontier")
port7 <- read_excel("./nominal.xlsx", sheet = "port7")
names(port7) <- names(frontier)
frontier <- rbind(frontier, port7[1:2,])
frontier <- frontier %>%
mutate(MSR = case_when(
Target == "MSR" ~ "MSR",
Target == "GMV" ~ "GMV",
TRUE ~ "Other"
))
# efficient frontier
ggplot()+
geom_point(data = frontier, aes(x = SD, y = Return, color = MSR))
# Step 1: Load the data
load("./A.RData")
A <- nominal[,2:5]
meanSD <- data.frame(
mean = apply(A, 2, mean),
SD = apply(A, 2, sd))
correlation <- cor(nominal[-1])[1:4,1:4]
covariance <- cov(nominal[-1])[1:4,1:4]
rf <- mean(nominal[,5])
# Define the number of portfolio simulations
n_simulations <- 50000
# Create an empty matrix to store simulation results
portfolios <- matrix(nrow = n_simulations, ncol = 7)
# Step 2: Loop through simulations and calculate mean standard deviation frontier
for (i in 1:n_simulations) {
# Generate random weights for asset classes
weights <- runif(4)
weights <- weights / sum(weights)  # Normalize to ensure they sum up to 1
# Calculate portfolio mean return and standard deviation
portfolio_mean <- sum(weights * meanSD$mean)
portfolio_sd <- sqrt(t(weights) %*% (correlation %*% weights))
portfolio_sharpe <- (portfolio_mean - rf) / portfolio_sd  # Sharpe ratio
# Store the results in the matrix
portfolios[i, ] <- c(weights, portfolio_mean, portfolio_sd, portfolio_sharpe)
}
# Create a data frame from the matrix
portfolios_df <- as.data.frame(portfolios)
colnames(portfolios_df) <- c("weights1","weights2","weights3","weights4", "Mean Return", "Standard Deviation", "Sharpe Ratio")
# Step 3: Print the data frame
print(head(portfolios_df))
# Step 4: Plot the efficient frontier
library(ggplot2)
ggplot(portfolios_df, aes(x = `Standard Deviation`, y = `Mean Return`, color = `Sharpe Ratio`)) +
geom_point() +
labs(title = "Efficient Frontier",
x = "Standard Deviation (Risk)",
y = "Mean Return",
color = "Sharpe Ratio") +
geom_abline(intercept = rf, slope = max(portfolios_df$`Sharpe Ratio`), color = "red", size = 1)+
theme_minimal()
# Step 5: Get MSR & GMV & 5 Risk Aversion portfolios
MSR <- portfolios_df %>% filter(portfolios_df$`Sharpe Ratio` ==max(portfolios_df$`Sharpe Ratio`))
MSR
GMV <- portfolios_df %>% filter(portfolios_df$`Standard Deviation` == min(portfolios_df$`Standard Deviation`))
GMV
AllPortfolio <- rbind(MSR,GMV)
name <- data.frame(Portfolio = c("MSR","GMV"))
AllPortfolio <- cbind(name, AllPortfolio)
Aportfolios <- data.frame(
A = c(1.3, 2.8, 6.5, 10.5, 16.9),
weight1 = (MSR$`Mean Return`- rf)/ (A*MSR$`Standard Deviation`^2)) %>%
mutate(weight2 = 1-weight1)%>%
mutate(weight3 = NA,
weight4 = NA,
`Mean Return` = MSR$`Mean Return`*weight1 + rf*weight2,
`Standard Deviation` = MSR$`Standard Deviation`*weight1) %>%
mutate(`Sharpe Ratio` = (`Mean Return` - rf)/`Standard Deviation`)
names(Aportfolios) <- names(AllPortfolio)
AllPortfolio <- rbind(AllPortfolio,Aportfolios)
AllPortfolio
